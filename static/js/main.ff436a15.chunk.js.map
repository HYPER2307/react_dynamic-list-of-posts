{"version":3,"sources":["components/PostsContext.tsx","hooks/usePosts.ts","components/PostsList.tsx","components/UserSelector.tsx","utils/fetchClient.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","api/postService.ts","components/ErrorNotification.tsx","components/PostDetails.tsx","components/PostsApp.tsx","App.tsx","index.tsx"],"names":["PostsContext","React","createContext","users","setUsers","selectedUser","setSelectedUser","userPosts","setUserPosts","selectedPost","setSelectedPost","postComments","setPostComments","hasFormError","setHasFormError","PostsProvider","children","useState","value","Provider","usePosts","useContext","PostsList","className","map","post","id","title","type","cn","onClick","prevPost","handlePostSelect","UserSelector","isDropdownActive","setIsDropdownActive","name","role","user","href","handleUserSelect","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","Loader","NewCommentForm","hasNameError","setHasNameError","setName","hasEmailError","setHasEmailError","email","setEmail","hasCommentError","setHasCommentError","comment","setComment","isLoading","setIsLoading","htmlFor","placeholder","onChange","event","target","preventDefault","postId","commentFromServer","prevComments","catch","finally","ErrorNotification","PostDetails","hasCommentsError","setHasCommentsError","isFormActive","setIsFormActive","handleCommentDelete","commentId","deleteComment","filter","useEffect","length","PostsApp","errorMessage","setErrorMessage","usersFromServer","userId","postsFromServer","error","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff436a15.chunk.js","sourcesContent":["import React, { Dispatch, SetStateAction, useState } from 'react';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\ntype PostsContextType = {\n  users: User[] | null,\n  setUsers: Dispatch<SetStateAction<User[] | null>>,\n  selectedUser: User | null,\n  setSelectedUser: Dispatch<SetStateAction<User | null>>,\n  userPosts: Post[] | null,\n  setUserPosts: Dispatch<SetStateAction<Post[] | null>>,\n  selectedPost: Post | null,\n  setSelectedPost: Dispatch<SetStateAction<Post | null>>,\n  postComments: Comment[] | null,\n  setPostComments: Dispatch<SetStateAction<Comment[] | null>>,\n  hasFormError: boolean,\n  setHasFormError: Dispatch<SetStateAction<boolean>>,\n};\n\nexport const PostsContext = React.createContext<PostsContextType>({\n  users: [],\n  setUsers: () => {},\n  selectedUser: null,\n  setSelectedUser: () => {},\n  userPosts: [],\n  setUserPosts: () => {},\n  selectedPost: null,\n  setSelectedPost: () => {},\n  postComments: [],\n  setPostComments: () => {},\n  hasFormError: false,\n  setHasFormError: () => {},\n});\n\ntype Props = {\n  children: React.ReactNode,\n};\n\nexport const PostsProvider: React.FC<Props> = ({ children }) => {\n  const [users, setUsers] = useState<User[] | null>(null);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [userPosts, setUserPosts] = useState<Post[] | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [postComments, setPostComments] = useState<Comment[] | null>(null);\n  const [hasFormError, setHasFormError] = useState(false);\n\n  const value = {\n    users,\n    setUsers,\n    selectedUser,\n    setSelectedUser,\n    userPosts,\n    setUserPosts,\n    selectedPost,\n    setSelectedPost,\n    postComments,\n    setPostComments,\n    hasFormError,\n    setHasFormError,\n  };\n\n  return (\n    <PostsContext.Provider\n      value={value}\n    >\n      {children}\n    </PostsContext.Provider>\n  );\n};\n","import React from 'react';\nimport { PostsContext } from '../components/PostsContext';\n\nexport const usePosts = () => React.useContext(PostsContext);\n","import React from 'react';\nimport cn from 'classnames';\nimport { usePosts } from '../hooks/usePosts';\nimport { Post } from '../types/Post';\n\nexport const PostsList: React.FC = () => {\n  const {\n    userPosts,\n    setSelectedPost,\n    selectedPost,\n  } = usePosts();\n\n  const handlePostSelect = (post: Post) => {\n    setSelectedPost(prevPost => {\n      if (prevPost?.id === post.id) {\n        return null;\n      }\n\n      return post;\n    });\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {userPosts?.map(post => (\n            <tr\n              data-cy=\"Post\"\n              key={post.id}\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={cn(\n                    'button',\n                    'is-link',\n                    {\n                      'is-light': selectedPost?.id !== post.id,\n                    },\n                  )}\n                  onClick={() => handlePostSelect(post)}\n                >\n                  {selectedPost?.id === post.id ? (\n                    'Close'\n                  ) : (\n                    'Open'\n                  )}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport { usePosts } from '../hooks/usePosts';\nimport { User } from '../types/User';\n\nexport const UserSelector: React.FC = () => {\n  const {\n    users,\n    selectedUser,\n    setSelectedUser,\n  } = usePosts();\n\n  const [isDropdownActive, setIsDropdownActive] = useState(false);\n\n  const handleUserSelect = (user: User) => {\n    setSelectedUser(user);\n    setIsDropdownActive(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn(\n        'dropdown',\n        {\n          'is-active': isDropdownActive,\n        },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsDropdownActive(!isDropdownActive)}\n        >\n          <span>\n            {selectedUser ? (\n              selectedUser.name\n            ) : (\n              'Choose a user'\n            )}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users?.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className=\"dropdown-item\"\n              onClick={() => handleUserSelect(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable  @typescript-eslint/no-explicit-any */\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { createComment } from '../api/postService';\nimport { usePosts } from '../hooks/usePosts';\n\nexport const NewCommentForm: React.FC = () => {\n  const {\n    setPostComments,\n    selectedPost,\n    setHasFormError,\n  } = usePosts();\n\n  const [hasNameError, setHasNameError] = useState(false);\n  const [name, setName] = useState('');\n  const [hasEmailError, setHasEmailError] = useState(false);\n  const [email, setEmail] = useState('');\n  const [hasCommentError, setHasCommentError] = useState(false);\n  const [comment, setComment] = useState('');\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setHasNameError(false);\n    setName(event.target.value);\n  };\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setHasEmailError(false);\n    setEmail(event.target.value);\n  };\n\n  const handleCommentChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setHasCommentError(false);\n    setComment(event.target.value);\n  };\n\n  const reset = () => {\n    setComment('');\n    setEmail('');\n    setName('');\n    setHasNameError(false);\n    setHasEmailError(false);\n    setHasCommentError(false);\n  };\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!name) {\n      setHasNameError(true);\n    }\n\n    if (!email) {\n      setHasEmailError(true);\n    }\n\n    if (!comment) {\n      setHasCommentError(true);\n    }\n\n    if (!name || !email || !comment) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    createComment({\n      postId: selectedPost?.id || 0,\n      name,\n      email,\n      body: comment,\n    }).then(commentFromServer => {\n      setPostComments(prevComments => {\n        if (prevComments) {\n          return [...prevComments, commentFromServer];\n        }\n\n        return null;\n      });\n    }).catch(() => {\n      setHasFormError(true);\n    }).finally(() => {\n      setIsLoading(false);\n      setComment('');\n    });\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            value={name}\n            onChange={handleNameChange}\n            className={cn(\n              'input',\n              {\n                'is-danger': hasNameError,\n              },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            value={email}\n            onChange={handleEmailChange}\n            className={cn(\n              'input',\n              {\n                'is-danger': hasEmailError,\n              },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {hasEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            value={comment}\n            onChange={handleCommentChange}\n            className={cn(\n              'textarea',\n              {\n                'is-danger': hasCommentError,\n              },\n            )}\n          />\n        </div>\n\n        {hasCommentError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn(\n              'button',\n              'is-link',\n              {\n                'is-loading': isLoading,\n              },\n            )}\n            onClick={onSubmit}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={reset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (data: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React from 'react';\n\nexport const ErrorNotification: React.FC = () => {\n  return (\n    <div\n      className=\"notification is-danger\"\n      data-cy=\"PostsLoadingError\"\n    >\n      Something went wrong!\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { usePosts } from '../hooks/usePosts';\nimport { deleteComment, getComments } from '../api/postService';\nimport { ErrorNotification } from './ErrorNotification';\n\nexport const PostDetails: React.FC = () => {\n  const {\n    selectedPost,\n    postComments,\n    setPostComments,\n    hasFormError,\n  } = usePosts();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasCommentsError, setHasCommentsError] = useState(false);\n  const [isFormActive, setIsFormActive] = useState(false);\n\n  const handleCommentDelete = (commentId: number) => {\n    deleteComment(commentId)\n      .then(() => {\n        setPostComments(prevComments => {\n          if (prevComments) {\n            return prevComments.filter(comment => (\n              comment.id !== commentId\n            ));\n          }\n\n          return null;\n        });\n      });\n  };\n\n  useEffect(() => {\n    if (selectedPost) {\n      setIsLoading(true);\n      setHasCommentsError(false);\n\n      getComments(selectedPost.id)\n        .then(setPostComments)\n        .catch(() => {\n          setHasCommentsError(true);\n          setPostComments(null);\n        })\n        .finally(() => setIsLoading(false));\n\n      setIsFormActive(false);\n    }\n  }, [selectedPost, setPostComments]);\n\n  return (\n    <>\n      {selectedPost && (\n        <div className=\"content\" data-cy=\"PostDetails\">\n          <div className=\"content\" data-cy=\"PostDetails\">\n            <div className=\"block\">\n              <h2 data-cy=\"PostTitle\">\n                {`#${selectedPost?.id}: ${selectedPost?.title}`}\n              </h2>\n\n              <p data-cy=\"PostBody\">\n                {selectedPost?.body}\n              </p>\n            </div>\n\n            <div className=\"block\">\n              {(!hasFormError && !hasCommentsError) && (\n                isLoading ? (\n                  <Loader />\n                ) : (\n                  <>\n                    {postComments?.length ? (\n                      <>\n                        <p className=\"title is-4\">Comments:</p>\n\n                        {postComments?.map((comment) => (\n                          <article\n                            className=\"message is-small\"\n                            data-cy=\"Comment\"\n                            key={comment.id}\n                          >\n                            <div className=\"message-header\">\n                              <a\n                                href={`mailto:${comment.email}`}\n                                data-cy=\"CommentAuthor\"\n                              >\n                                {comment.name}\n                              </a>\n                              <button\n                                data-cy=\"CommentDelete\"\n                                type=\"button\"\n                                className=\"delete is-small\"\n                                aria-label=\"delete\"\n                                onClick={() => handleCommentDelete(comment.id)}\n                              >\n                                delete button\n                              </button>\n                            </div>\n\n                            <div className=\"message-body\" data-cy=\"CommentBody\">\n                              {comment.body}\n                            </div>\n                          </article>\n                        ))}\n                      </>\n                    ) : (\n                      <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                        No comments yet\n                      </p>\n                    )}\n                  </>\n                )\n              )}\n\n              {(hasFormError || hasCommentsError) && (\n                <ErrorNotification />\n              )}\n\n              {(!isFormActive && !hasCommentsError && !hasFormError) && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setIsFormActive(true)}\n                >\n                  Write a comment\n                </button>\n              )}\n            </div>\n\n            {(isFormActive && !hasFormError) && (\n              <NewCommentForm />\n            )}\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport cn from 'classnames';\nimport { PostsList } from './PostsList';\n// import { PostDetails } from './PostDetails';\nimport { UserSelector } from './UserSelector';\nimport { usePosts } from '../hooks/usePosts';\nimport { getPosts, getUsers } from '../api/postService';\nimport { Loader } from './Loader';\nimport { PostDetails } from './PostDetails';\nimport { ErrorNotification } from './ErrorNotification';\n\nexport const PostsApp: React.FC = () => {\n  const {\n    selectedUser,\n    setUsers,\n    setUserPosts,\n    userPosts,\n    selectedPost,\n  } = usePosts();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    getUsers()\n      .then(usersFromServer => {\n        setUsers(usersFromServer);\n      })\n      .catch();\n  }, [setUsers]);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setErrorMessage('');\n      setIsLoading(true);\n\n      getPosts(selectedUser.id)\n        .then(postsFromServer => {\n          setUserPosts(postsFromServer);\n        })\n        .catch(error => setErrorMessage(error))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUser, setUserPosts, setErrorMessage]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!errorMessage && (\n                  <>\n                    {!selectedUser ? (\n                      <p data-cy=\"NoSelectedUser\">\n                        No user selected\n                      </p>\n                    ) : (\n                      <>\n                        {isLoading ? (\n                          <Loader />\n                        ) : (\n                          <>\n                            {!userPosts?.length ? (\n                              <div\n                                className=\"notification is-warning\"\n                                data-cy=\"NoPostsYet\"\n                              >\n                                No posts yet\n                              </div>\n                            ) : (\n                              <PostsList />\n                            )}\n                          </>\n                        )}\n                      </>\n                    )}\n                  </>\n                )}\n\n                {errorMessage && (\n                  <ErrorNotification />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={cn(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import React from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { PostsApp } from './components/PostsApp';\nimport { PostsProvider } from './components/PostsContext';\n\nexport const App: React.FC = () => {\n  return (\n    <PostsProvider>\n      <PostsApp />\n    </PostsProvider>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}